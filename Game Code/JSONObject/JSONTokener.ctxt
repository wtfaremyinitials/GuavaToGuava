#BlueJ class context
comment0.params=reader
comment0.target=JSONTokener(java.io.Reader)
comment0.text=\n\ Construct\ a\ JSONTokener\ from\ a\ Reader.\n\n\ @param\ reader\ \ \ \ \ A\ reader.\n
comment1.params=inputStream
comment1.target=JSONTokener(java.io.InputStream)
comment1.text=\n\ Construct\ a\ JSONTokener\ from\ an\ InputStream.\n\ @param\ inputStream\ The\ source.\n
comment10.params=
comment10.target=char\ nextClean()
comment10.text=\n\ Get\ the\ next\ char\ in\ the\ string,\ skipping\ whitespace.\n\ @throws\ JSONException\n\ @return\ \ A\ character,\ or\ 0\ if\ there\ are\ no\ more\ characters.\n
comment11.params=quote
comment11.target=java.lang.String\ nextString(char)
comment11.text=\n\ Return\ the\ characters\ up\ to\ the\ next\ close\ quote\ character.\n\ Backslash\ processing\ is\ done.\ The\ formal\ JSON\ format\ does\ not\n\ allow\ strings\ in\ single\ quotes,\ but\ an\ implementation\ is\ allowed\ to\n\ accept\ them.\n\ @param\ quote\ The\ quoting\ character,\ either\n\ \ \ \ \ \ <code>"</code>&nbsp;<small>(double\ quote)</small>\ or\n\ \ \ \ \ \ <code>'</code>&nbsp;<small>(single\ quote)</small>.\n\ @return\ \ \ \ \ \ A\ String.\n\ @throws\ JSONException\ Unterminated\ string.\n
comment12.params=delimiter
comment12.target=java.lang.String\ nextTo(char)
comment12.text=\n\ Get\ the\ text\ up\ but\ not\ including\ the\ specified\ character\ or\ the\n\ end\ of\ line,\ whichever\ comes\ first.\n\ @param\ \ delimiter\ A\ delimiter\ character.\n\ @return\ \ \ A\ string.\n
comment13.params=delimiters
comment13.target=java.lang.String\ nextTo(java.lang.String)
comment13.text=\n\ Get\ the\ text\ up\ but\ not\ including\ one\ of\ the\ specified\ delimiter\n\ characters\ or\ the\ end\ of\ line,\ whichever\ comes\ first.\n\ @param\ delimiters\ A\ set\ of\ delimiter\ characters.\n\ @return\ A\ string,\ trimmed.\n
comment14.params=
comment14.target=java.lang.Object\ nextValue()
comment14.text=\n\ Get\ the\ next\ value.\ The\ value\ can\ be\ a\ Boolean,\ Double,\ Integer,\n\ JSONArray,\ JSONObject,\ Long,\ or\ String,\ or\ the\ JSONObject.NULL\ object.\n\ @throws\ JSONException\ If\ syntax\ error.\n\n\ @return\ An\ object.\n
comment15.params=to
comment15.target=char\ skipTo(char)
comment15.text=\n\ Skip\ characters\ until\ the\ next\ character\ is\ the\ requested\ character.\n\ If\ the\ requested\ character\ is\ not\ found,\ no\ characters\ are\ skipped.\n\ @param\ to\ A\ character\ to\ skip\ to.\n\ @return\ The\ requested\ character,\ or\ zero\ if\ the\ requested\ character\n\ is\ not\ found.\n
comment16.params=message
comment16.target=org.json.JSONException\ syntaxError(java.lang.String)
comment16.text=\n\ Make\ a\ JSONException\ to\ signal\ a\ syntax\ error.\n\n\ @param\ message\ The\ error\ message.\n\ @return\ \ A\ JSONException\ object,\ suitable\ for\ throwing\n
comment17.params=
comment17.target=java.lang.String\ toString()
comment17.text=\n\ Make\ a\ printable\ string\ of\ this\ JSONTokener.\n\n\ @return\ "\ at\ {index}\ [character\ {character}\ line\ {line}]"\n
comment2.params=s
comment2.target=JSONTokener(java.lang.String)
comment2.text=\n\ Construct\ a\ JSONTokener\ from\ a\ string.\n\n\ @param\ s\ \ \ \ \ A\ source\ string.\n
comment3.params=
comment3.target=void\ back()
comment3.text=\n\ Back\ up\ one\ character.\ This\ provides\ a\ sort\ of\ lookahead\ capability,\n\ so\ that\ you\ can\ test\ for\ a\ digit\ or\ letter\ before\ attempting\ to\ parse\n\ the\ next\ number\ or\ identifier.\n
comment4.params=c
comment4.target=int\ dehexchar(char)
comment4.text=\n\ Get\ the\ hex\ value\ of\ a\ character\ (base16).\n\ @param\ c\ A\ character\ between\ '0'\ and\ '9'\ or\ between\ 'A'\ and\ 'F'\ or\n\ between\ 'a'\ and\ 'f'.\n\ @return\ \ An\ int\ between\ 0\ and\ 15,\ or\ -1\ if\ c\ was\ not\ a\ hex\ digit.\n
comment5.params=
comment5.target=boolean\ end()
comment6.params=
comment6.target=boolean\ more()
comment6.text=\n\ Determine\ if\ the\ source\ string\ still\ contains\ characters\ that\ next()\n\ can\ consume.\n\ @return\ true\ if\ not\ yet\ at\ the\ end\ of\ the\ source.\n
comment7.params=
comment7.target=char\ next()
comment7.text=\n\ Get\ the\ next\ character\ in\ the\ source\ string.\n\n\ @return\ The\ next\ character,\ or\ 0\ if\ past\ the\ end\ of\ the\ source\ string.\n
comment8.params=c
comment8.target=char\ next(char)
comment8.text=\n\ Consume\ the\ next\ character,\ and\ check\ that\ it\ matches\ a\ specified\n\ character.\n\ @param\ c\ The\ character\ to\ match.\n\ @return\ The\ character.\n\ @throws\ JSONException\ if\ the\ character\ does\ not\ match.\n
comment9.params=n
comment9.target=java.lang.String\ next(int)
comment9.text=\n\ Get\ the\ next\ n\ characters.\n\n\ @param\ n\ \ \ \ \ The\ number\ of\ characters\ to\ take.\n\ @return\ \ \ \ \ \ A\ string\ of\ n\ characters.\n\ @throws\ JSONException\n\ \ \ Substring\ bounds\ error\ if\ there\ are\ not\n\ \ \ n\ characters\ remaining\ in\ the\ source\ string.\n
numComments=18
