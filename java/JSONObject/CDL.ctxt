#BlueJ class context
comment0.params=x
comment0.target=java.lang.String\ getValue(JSONTokener)
comment0.text=\n\ Get\ the\ next\ value.\ The\ value\ can\ be\ wrapped\ in\ quotes.\ The\ value\ can\n\ be\ empty.\n\ @param\ x\ A\ JSONTokener\ of\ the\ source\ text.\n\ @return\ The\ value\ string,\ or\ null\ if\ empty.\n\ @throws\ JSONException\ if\ the\ quoted\ string\ is\ badly\ formed.\n
comment1.params=x
comment1.target=JSONArray\ rowToJSONArray(JSONTokener)
comment1.text=\n\ Produce\ a\ JSONArray\ of\ strings\ from\ a\ row\ of\ comma\ delimited\ values.\n\ @param\ x\ A\ JSONTokener\ of\ the\ source\ text.\n\ @return\ A\ JSONArray\ of\ strings.\n\ @throws\ JSONException\n
comment2.params=names\ x
comment2.target=JSONObject\ rowToJSONObject(JSONArray,\ JSONTokener)
comment2.text=\n\ Produce\ a\ JSONObject\ from\ a\ row\ of\ comma\ delimited\ text,\ using\ a\n\ parallel\ JSONArray\ of\ strings\ to\ provides\ the\ names\ of\ the\ elements.\n\ @param\ names\ A\ JSONArray\ of\ names.\ This\ is\ commonly\ obtained\ from\ the\n\ \ first\ row\ of\ a\ comma\ delimited\ text\ file\ using\ the\ rowToJSONArray\n\ \ method.\n\ @param\ x\ A\ JSONTokener\ of\ the\ source\ text.\n\ @return\ A\ JSONObject\ combining\ the\ names\ and\ values.\n\ @throws\ JSONException\n
comment3.params=ja
comment3.target=java.lang.String\ rowToString(JSONArray)
comment3.text=\n\ Produce\ a\ comma\ delimited\ text\ row\ from\ a\ JSONArray.\ Values\ containing\n\ the\ comma\ character\ will\ be\ quoted.\ Troublesome\ characters\ may\ be\n\ removed.\n\ @param\ ja\ A\ JSONArray\ of\ strings.\n\ @return\ A\ string\ ending\ in\ NEWLINE.\n
comment4.params=string
comment4.target=JSONArray\ toJSONArray(java.lang.String)
comment4.text=\n\ Produce\ a\ JSONArray\ of\ JSONObjects\ from\ a\ comma\ delimited\ text\ string,\n\ using\ the\ first\ row\ as\ a\ source\ of\ names.\n\ @param\ string\ The\ comma\ delimited\ text.\n\ @return\ A\ JSONArray\ of\ JSONObjects.\n\ @throws\ JSONException\n
comment5.params=x
comment5.target=JSONArray\ toJSONArray(JSONTokener)
comment5.text=\n\ Produce\ a\ JSONArray\ of\ JSONObjects\ from\ a\ comma\ delimited\ text\ string,\n\ using\ the\ first\ row\ as\ a\ source\ of\ names.\n\ @param\ x\ The\ JSONTokener\ containing\ the\ comma\ delimited\ text.\n\ @return\ A\ JSONArray\ of\ JSONObjects.\n\ @throws\ JSONException\n
comment6.params=names\ string
comment6.target=JSONArray\ toJSONArray(JSONArray,\ java.lang.String)
comment6.text=\n\ Produce\ a\ JSONArray\ of\ JSONObjects\ from\ a\ comma\ delimited\ text\ string\n\ using\ a\ supplied\ JSONArray\ as\ the\ source\ of\ element\ names.\n\ @param\ names\ A\ JSONArray\ of\ strings.\n\ @param\ string\ The\ comma\ delimited\ text.\n\ @return\ A\ JSONArray\ of\ JSONObjects.\n\ @throws\ JSONException\n
comment7.params=names\ x
comment7.target=JSONArray\ toJSONArray(JSONArray,\ JSONTokener)
comment7.text=\n\ Produce\ a\ JSONArray\ of\ JSONObjects\ from\ a\ comma\ delimited\ text\ string\n\ using\ a\ supplied\ JSONArray\ as\ the\ source\ of\ element\ names.\n\ @param\ names\ A\ JSONArray\ of\ strings.\n\ @param\ x\ A\ JSONTokener\ of\ the\ source\ text.\n\ @return\ A\ JSONArray\ of\ JSONObjects.\n\ @throws\ JSONException\n
comment8.params=ja
comment8.target=java.lang.String\ toString(JSONArray)
comment8.text=\n\ Produce\ a\ comma\ delimited\ text\ from\ a\ JSONArray\ of\ JSONObjects.\ The\n\ first\ row\ will\ be\ a\ list\ of\ names\ obtained\ by\ inspecting\ the\ first\n\ JSONObject.\n\ @param\ ja\ A\ JSONArray\ of\ JSONObjects.\n\ @return\ A\ comma\ delimited\ text.\n\ @throws\ JSONException\n
comment9.params=names\ ja
comment9.target=java.lang.String\ toString(JSONArray,\ JSONArray)
comment9.text=\n\ Produce\ a\ comma\ delimited\ text\ from\ a\ JSONArray\ of\ JSONObjects\ using\n\ a\ provided\ list\ of\ names.\ The\ list\ of\ names\ is\ not\ included\ in\ the\n\ output.\n\ @param\ names\ A\ JSONArray\ of\ strings.\n\ @param\ ja\ A\ JSONArray\ of\ JSONObjects.\n\ @return\ A\ comma\ delimited\ text.\n\ @throws\ JSONException\n
numComments=10
