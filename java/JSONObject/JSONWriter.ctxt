#BlueJ class context
comment0.params=w
comment0.target=JSONWriter(java.io.Writer)
comment0.text=\n\ Make\ a\ fresh\ JSONWriter.\ It\ can\ be\ used\ to\ build\ one\ JSON\ text.\n
comment1.params=string
comment1.target=org.json.JSONWriter\ append(java.lang.String)
comment1.text=\n\ Append\ a\ value.\n\ @param\ string\ A\ string\ value.\n\ @return\ this\n\ @throws\ JSONException\ If\ the\ value\ is\ out\ of\ sequence.\n
comment10.params=b
comment10.target=org.json.JSONWriter\ value(boolean)
comment10.text=\n\ Append\ either\ the\ value\ <code>true</code>\ or\ the\ value\n\ <code>false</code>.\n\ @param\ b\ A\ boolean.\n\ @return\ this\n\ @throws\ JSONException\n
comment11.params=d
comment11.target=org.json.JSONWriter\ value(double)
comment11.text=\n\ Append\ a\ double\ value.\n\ @param\ d\ A\ double.\n\ @return\ this\n\ @throws\ JSONException\ If\ the\ number\ is\ not\ finite.\n
comment12.params=l
comment12.target=org.json.JSONWriter\ value(long)
comment12.text=\n\ Append\ a\ long\ value.\n\ @param\ l\ A\ long.\n\ @return\ this\n\ @throws\ JSONException\n
comment13.params=object
comment13.target=org.json.JSONWriter\ value(java.lang.Object)
comment13.text=\n\ Append\ an\ object\ value.\n\ @param\ object\ The\ object\ to\ append.\ It\ can\ be\ null,\ or\ a\ Boolean,\ Number,\n\ \ \ String,\ JSONObject,\ or\ JSONArray,\ or\ an\ object\ that\ implements\ JSONString.\n\ @return\ this\n\ @throws\ JSONException\ If\ the\ value\ is\ out\ of\ sequence.\n
comment2.params=
comment2.target=org.json.JSONWriter\ array()
comment2.text=\n\ Begin\ appending\ a\ new\ array.\ All\ values\ until\ the\ balancing\n\ <code>endArray</code>\ will\ be\ appended\ to\ this\ array.\ The\n\ <code>endArray</code>\ method\ must\ be\ called\ to\ mark\ the\ array's\ end.\n\ @return\ this\n\ @throws\ JSONException\ If\ the\ nesting\ is\ too\ deep,\ or\ if\ the\ object\ is\n\ started\ in\ the\ wrong\ place\ (for\ example\ as\ a\ key\ or\ after\ the\ end\ of\ the\n\ outermost\ array\ or\ object).\n
comment3.params=mode\ c
comment3.target=org.json.JSONWriter\ end(char,\ char)
comment3.text=\n\ End\ something.\n\ @param\ mode\ Mode\n\ @param\ c\ Closing\ character\n\ @return\ this\n\ @throws\ JSONException\ If\ unbalanced.\n
comment4.params=
comment4.target=org.json.JSONWriter\ endArray()
comment4.text=\n\ End\ an\ array.\ This\ method\ most\ be\ called\ to\ balance\ calls\ to\n\ <code>array</code>.\n\ @return\ this\n\ @throws\ JSONException\ If\ incorrectly\ nested.\n
comment5.params=
comment5.target=org.json.JSONWriter\ endObject()
comment5.text=\n\ End\ an\ object.\ This\ method\ most\ be\ called\ to\ balance\ calls\ to\n\ <code>object</code>.\n\ @return\ this\n\ @throws\ JSONException\ If\ incorrectly\ nested.\n
comment6.params=string
comment6.target=org.json.JSONWriter\ key(java.lang.String)
comment6.text=\n\ Append\ a\ key.\ The\ key\ will\ be\ associated\ with\ the\ next\ value.\ In\ an\n\ object,\ every\ value\ must\ be\ preceded\ by\ a\ key.\n\ @param\ string\ A\ key\ string.\n\ @return\ this\n\ @throws\ JSONException\ If\ the\ key\ is\ out\ of\ place.\ For\ example,\ keys\n\ \ do\ not\ belong\ in\ arrays\ or\ if\ the\ key\ is\ null.\n
comment7.params=
comment7.target=org.json.JSONWriter\ object()
comment7.text=\n\ Begin\ appending\ a\ new\ object.\ All\ keys\ and\ values\ until\ the\ balancing\n\ <code>endObject</code>\ will\ be\ appended\ to\ this\ object.\ The\n\ <code>endObject</code>\ method\ must\ be\ called\ to\ mark\ the\ object's\ end.\n\ @return\ this\n\ @throws\ JSONException\ If\ the\ nesting\ is\ too\ deep,\ or\ if\ the\ object\ is\n\ started\ in\ the\ wrong\ place\ (for\ example\ as\ a\ key\ or\ after\ the\ end\ of\ the\n\ outermost\ array\ or\ object).\n
comment8.params=c
comment8.target=void\ pop(char)
comment8.text=\n\ Pop\ an\ array\ or\ object\ scope.\n\ @param\ c\ The\ scope\ to\ close.\n\ @throws\ JSONException\ If\ nesting\ is\ wrong.\n
comment9.params=jo
comment9.target=void\ push(org.json.JSONObject)
comment9.text=\n\ Push\ an\ array\ or\ object\ scope.\n\ @param\ jo\ The\ scope\ to\ open.\n\ @throws\ JSONException\ If\ nesting\ is\ too\ deep.\n
numComments=14
